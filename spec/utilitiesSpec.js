// Generated by CoffeeScript 1.9.3
(function() {
  describe('utilities', function() {
    describe('identity', function() {
      return it('should take value which returns itself', function() {
        return expect(_.identity(5)).toEqual(5);
      });
    });
    describe('constant', function() {
      return it('should create a function that returns the same value that is used as the argument of _.constant', function() {
        var fn;
        fn = _.constant(5);
        return expect(fn()).toEqual(5);
      });
    });
    describe('noop', function() {
      return it('should return undefined', function() {
        return expect(_.noop()).toEqual(void 0);
      });
    });
    describe('times', function() {
      return it('should invoke the given iteratee function n times', function() {
        var result;
        result = _.times(5, _.identity);
        return expect(result).toEqual([1, 2, 3, 4, 5]);
      });
    });
    describe('random', function() {
      it('should return NaN if no arguments are provided', function() {
        return expect(_.random()).toEqual(NaN);
      });
      return it('should return a random integer between min and max', function() {
        return expect(_.random(1, 1000)).not.toEqual(_.random(1, 1000));
      });
    });
    describe('mixin', function() {
      return it('should extend functions to underscore object', function() {
        var fn, result;
        fn = function(str) {
          return str.charAt(0).toUpperCase() + str.substring(1);
        };
        _.mixin({
          capitalize: fn
        });
        result = _.capitalize("lol it works");
        return expect(result).toEqual("Lol it works");
      });
    });
    describe('uniqueId', function() {
      return it('should generate a globally-unique id', function() {
        _.uniqueId('bbq');
        _.uniqueId('bbq');
        return expect(_.uniqueId('bbq')).toEqual('bbq3');
      });
    });
    describe('escape', function() {
      return it('should escape a string for insertion into HTML, replacing &, <, >, ", `, and \'', function() {
        return expect(_.escape('<"lol">')).toEqual('&#60;&#34;lol&#34;&#62;');
      });
    });
    return describe('unescape', function() {
      return it('should function as the opposite of escape, replaces &amp;, &lt;, &gt;, &quot;, &#96; and &#x27; with their unescaped counterparts.', function() {
        return expect(_.unescape('&#60;&#34;lol&#34;&#62;')).toEqual('<"lol">');
      });
    });
  });

}).call(this);
