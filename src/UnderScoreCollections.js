// Generated by CoffeeScript 1.8.0
(function() {
  var checkObjectForProperties, checkObjectForProperty,
    __hasProp = {}.hasOwnProperty;

  window._ = {};

  _.each = function(container, callback) {
    var index, item, key, value, _i, _len, _results, _results1;
    if (Array.isArray(container)) {
      _results = [];
      for (index = _i = 0, _len = container.length; _i < _len; index = ++_i) {
        item = container[index];
        _results.push(callback(item, index, container));
      }
      return _results;
    } else {
      _results1 = [];
      for (key in container) {
        if (!__hasProp.call(container, key)) continue;
        value = container[key];
        _results1.push(callback(value, key, container));
      }
      return _results1;
    }
  };

  _.map = function(container, callback) {
    var index, item, key, value, _i, _len, _results, _results1;
    if (Array.isArray(container)) {
      _results = [];
      for (index = _i = 0, _len = container.length; _i < _len; index = ++_i) {
        item = container[index];
        _results.push(callback(item, index, container));
      }
      return _results;
    } else {
      _results1 = [];
      for (key in container) {
        if (!__hasProp.call(container, key)) continue;
        value = container[key];
        _results1.push(callback(value, key, container));
      }
      return _results1;
    }
  };

  _.reduce = function(container, callback, startingValue) {
    var element, index, key, value, _i, _len;
    if (startingValue == null) {
      startingValue = 0;
    }
    if (Array.isArray(container)) {
      for (index = _i = 0, _len = container.length; _i < _len; index = ++_i) {
        element = container[index];
        startingValue = callback(startingValue, element, index, container);
      }
    } else {
      for (key in container) {
        if (!__hasProp.call(container, key)) continue;
        value = container[key];
        startingValue = callback(startingValue, value, key, container);
      }
    }
    return startingValue;
  };

  _.find = function(container, callback) {
    var element, key, result, value, _i, _len;
    if (Array.isArray(container)) {
      for (_i = 0, _len = container.length; _i < _len; _i++) {
        element = container[_i];
        if (callback(element) === true) {
          result = result || element;
        }
      }
    } else {
      for (key in container) {
        if (!__hasProp.call(container, key)) continue;
        value = container[key];
        if (callback(value) === true) {
          result = result || value;
        }
      }
    }
    return result;
  };

  _.filter = function(container, callback) {
    var element, key, result, value;
    if (Array.isArray(container)) {
      result = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = container.length; _i < _len; _i++) {
          element = container[_i];
          if (callback(element) === true) {
            _results.push(element);
          }
        }
        return _results;
      })();
    } else {
      result = (function() {
        var _results;
        _results = [];
        for (key in container) {
          if (!__hasProp.call(container, key)) continue;
          value = container[key];
          if (callback(value) === true) {
            _results.push(value);
          }
        }
        return _results;
      })();
    }
    return result;
  };

  _.where = function(container, properties) {
    var key, object, results, _i, _len;
    results = [];
    if (Array.isArray(container)) {
      for (_i = 0, _len = container.length; _i < _len; _i++) {
        object = container[_i];
        if (checkObjectForProperties(object, properties)) {
          results.push(object);
        }
      }
    } else {
      for (key in container) {
        if (checkObjectForProperties(container[key], properties)) {
          results.push(container[key]);
        }
      }
    }
    return results;
  };

  checkObjectForProperties = function(object, properties) {
    var key;
    for (key in properties) {
      if (!checkObjectForProperty(key, properties[key], object)) {
        return false;
      }
    }
    return true;
  };

  checkObjectForProperty = function(key, value, object) {
    var otherKey;
    for (otherKey in object) {
      if (otherKey === key && value === object[key]) {
        return true;
      }
    }
    return false;
  };

  _.findWhere = function(container, properties) {
    var key, object, _i, _len;
    if (Array.isArray(container)) {
      for (_i = 0, _len = container.length; _i < _len; _i++) {
        object = container[_i];
        if (checkObjectForProperties(object, properties)) {
          return object;
        }
      }
    } else {
      for (key in container) {
        if (checkObjectForProperties(container[key], properties)) {
          return container[key];
        }
      }
    }
    return void 0;
  };

  _.reject = function(container, callback) {
    var element, key, results;
    if (Array.isArray(container)) {
      return results = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = container.length; _i < _len; _i++) {
          element = container[_i];
          if (callback(element) !== true) {
            _results.push(element);
          }
        }
        return _results;
      })();
    } else {
      return results = (function() {
        var _results;
        _results = [];
        for (key in container) {
          if (callback(container[key]) !== true) {
            _results.push(container[key]);
          }
        }
        return _results;
      })();
    }
  };

  _.every = function(container, callback) {
    var element, key, _i, _len;
    if (Array.isArray(container)) {
      for (_i = 0, _len = container.length; _i < _len; _i++) {
        element = container[_i];
        if (callback(element) !== true) {
          return false;
        }
      }
    } else {
      for (key in container) {
        if (callback(container[key]) !== true) {
          return false;
        }
      }
    }
    return true;
  };

  _.some = function(container, callback) {
    var element, key, _i, _len;
    if (Array.isArray(container)) {
      for (_i = 0, _len = container.length; _i < _len; _i++) {
        element = container[_i];
        if (callback(element)) {
          return true;
        }
      }
    } else {
      for (key in container) {
        if (callback(container[key])) {
          return true;
        }
      }
    }
    return false;
  };

}).call(this);
