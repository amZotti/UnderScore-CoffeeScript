// Generated by CoffeeScript 1.8.0
(function() {
  var checkObjectForProperties, checkObjectForProperty,
    __hasProp = {}.hasOwnProperty;

  window._ = {};

  _.each = function(container, callback) {
    var index, item, key, value, _i, _len, _results, _results1;
    if (Array.isArray(container)) {
      _results = [];
      for (index = _i = 0, _len = container.length; _i < _len; index = ++_i) {
        item = container[index];
        _results.push(callback(item, index, container));
      }
      return _results;
    } else {
      _results1 = [];
      for (key in container) {
        if (!__hasProp.call(container, key)) continue;
        value = container[key];
        _results1.push(callback(value, key, container));
      }
      return _results1;
    }
  };

  _.map = function(container, callback) {
    var index, item, key, value, _i, _len, _results, _results1;
    if (Array.isArray(container)) {
      _results = [];
      for (index = _i = 0, _len = container.length; _i < _len; index = ++_i) {
        item = container[index];
        _results.push(callback(item, index, container));
      }
      return _results;
    } else {
      _results1 = [];
      for (key in container) {
        if (!__hasProp.call(container, key)) continue;
        value = container[key];
        _results1.push(callback(value, key, container));
      }
      return _results1;
    }
  };

  _.reduce = function(container, callback, startingValue) {
    if (startingValue == null) {
      startingValue = 0;
    }
    _.each(container, function(element, index, container) {
      return startingValue = callback(startingValue, element, index, container);
    });
    return startingValue;
  };

  _.find = function(container, callback) {
    var result;
    result = void 0;
    _.each(container, function(value, index, container) {
      if (result === void 0 && callback(value) === true) {
        return result = value;
      }
    });
    return result;
  };

  _.detect = _.find;

  _.filter = function(container, callback) {
    var results;
    results = [];
    _.each(container, function(value, index, container) {
      if (callback(value)) {
        return results.push(value);
      }
    });
    return results;
  };

  _.select = _.filter;

  _.where = function(container, properties) {
    var results;
    results = [];
    _.each(container, function(value, index, container) {
      if (checkObjectForProperties(value, properties)) {
        return results.push(value);
      }
    });
    return results;
  };

  checkObjectForProperties = function(object, properties) {
    var key;
    for (key in properties) {
      if (!checkObjectForProperty(key, properties[key], object)) {
        return false;
      }
    }
    return true;
  };

  checkObjectForProperty = function(key, value, object) {
    var otherKey;
    for (otherKey in object) {
      if (otherKey === key && value === object[key]) {
        return true;
      }
    }
    return false;
  };

  _.findWhere = function(container, properties) {
    return _.where(container, properties)[0];
  };

  _.reject = function(container, callback) {
    return _.filter(container, function(value) {
      return !callback(value);
    });
  };

  _.every = function(container, callback) {
    var status;
    status = true;
    _.each(container, function(value) {
      if (!callback(value)) {
        return status = false;
      }
    });
    return status;
  };

  _.all = _.every;

  _.some = function(container, callback) {
    return _.filter(container, callback).length !== 0;
  };

  _.any = _.some;

  _.contains = function(container, value) {
    return _.some(container, function(element) {
      return element === value;
    });
  };

  _.include = _.contains;

  _.invoke = function(container, methodName) {
    var args;
    args = [].slice.call(arguments, 2);
    return _.map(container, function(value) {
      return value[methodName].apply(value, args);
    });
  };

  _.pluck = function(container, key) {
    return _.map(container, function(obj) {
      return obj[key];
    });
  };

  _.max = function(container, callback) {
    var maxVal, result;
    result = void 0;
    maxVal = void 0;
    _.each(container, function(value) {
      var count;
      if (callback) {
        count = callback(value);
      } else {
        count = value;
      }
      maxVal = maxVal || count;
      result = result || value;
      if (count > maxVal) {
        return result = value;
      }
    });
    return result || Number.POSITIVE_INFINITY;
  };

  _.min = function(container, callback) {
    var minVal, result;
    result = void 0;
    minVal = void 0;
    _.each(container, function(value) {
      var count;
      if (callback) {
        count = callback(value);
      } else {
        count = value;
      }
      minVal = minVal || count;
      result = result || value;
      if (count < minVal) {
        return result = value;
      }
    });
    return result || Number.POSITIVE_INFINITY;
  };

}).call(this);
